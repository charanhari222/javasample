version: 0.2
env:
  secrets-manager:
    LOGIN: sonarqube-secret:sonartoken
    HOST: sonarqube-secret:HOST
    Project: sonarqube-secret:project
    Sonar_credentials: sonarqube-secret:sonarcredentials
phases:
  install:
    runtime-versions:
      java: corretto11.x
      java: corretto8.x
  pre_build:
    commands:
      - yum update -y
      - yum install -y ruby wget
      - yum install unzip -y
      - wget http://www-eu.apache.org/dist/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz
      - tar xzf apache-maven-3.5.4-bin.tar.gz
      - ln -s apache-maven-3.5.4 maven
      - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-linux.zip
      - unzip ./sonar-scanner-cli-4.4.0.2170-linux.zip
      - export PATH=$PATH:/sonar-scanner-4.4.0.2170-linux/bin/
  build:
    commands:
      - mvn clean package
  post_build:
    commands:
      - export JAVA_HOME="/usr/lib/jvm/java-11-amazon-corretto.x86_64"
      - PATH=$JAVA_HOME/bin:$PATH
      - export PATH=$PATH:$JAVA_HOME/bin
      - echo $JAVA_HOME
      - echo $HOST
      - mvn sonar:sonar -Dsonar.login=$LOGIN -Dsonar.host.url=$HOST -Dsonar.projectKey=$Project > sonarreport.json
      - sonar_link=$(cat sonarreport.json | egrep -o "you can browse http://[^, ]+")
      - sonar_task_id=$(cat sonarreport.json | egrep -o "task\?id=[^ ]+" | cut -d'=' -f2)
      # Allow time for SonarQube background task to complete
      - |
        stat="PENDING";
        while [ "$stat" != "SUCCESS" ]; do
          if [ $stat = "FAILED" ] || [ $stat = "CANCELLED" ]; then
            echo "SonarQube task $sonar_task_id failed";
            exit 1;
          fi
          stat=$(curl -u $Sonar_credentials http://13.82.226.119:9000/sonar/api/ce/task\?id=$sonar_task_id | jq -r '.task.status');
          sleep 5;
        done
      - sonar_analysis_id=$(curl -u $Sonar_credentials http://13.82.226.119:9000/sonar/api/ce/task\?id=$sonar_task_id | jq -r '.task.analysisId')
      - quality_status=$(curl -u $Sonar_credentials http://13.82.226.119:9000/sonar/api/qualitygates/project_status\?analysisId=$sonar_analysis_id | jq -r '.projectStatus.status')
      - SCAN_RESULT=$(curl -o sonarreport.json -u $Sonar_credentials http://13.82.226.119:9000/sonar/api/issues/search?createdAfter=2020-10-21&componentKeys=devsecops&severities=CRITICAL,BLOCKER&languages=php&types=VULNERABILITY&onComponentOnly=true)
      - |
        jq "{ \"messageType\": \"CodeScanReport\", \"reportType\": \"SONAR-QUBE\", \
        \"createdAt\": $(date +\"%Y-%m-%dT%H:%M:%S.%3NZ\"), \"source_repository\": env.CODEBUILD_SOURCE_REPO_URL, \
        \"source_branch\": env.CODEBUILD_SOURCE_VERSION, \
        \"build_id\": env.CODEBUILD_BUILD_ID, \
        \"source_commitid\": env.CODEBUILD_RESOLVED_SOURCE_VERSION, \
        \"report\": . }" sonarreport.json > payload.json
      - |
        if [ $quality_status = "ERROR" ] || [ $quality_status = "WARN" ]; then
          aws lambda invoke --function-name ImportVulToSecurityHub --payload file://payload.json sonarreport.json && echo "LAMBDA_SUCCEDED" || echo "LAMBDA_FAILED";
          echo "in quality_status ERROR or WARN condition"
          exit 1;
        elif [ $quality_status = "OK" ]; then
          echo "in quality_status OK condition"
        else
          echo "in quality_status  unexpected condition"
          exit 1;
        fi
reports:
  arn:aws:codebuild:ap-south-1:033698541909:report-group/codecoverage:
    files:
      - target/jacoco-ut/jacoco.xml
    file-format: "jacocoxml"       
artifacts:
  type: zip
  files: '**/*'
      
